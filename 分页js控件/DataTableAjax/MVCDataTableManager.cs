using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text;
using System.Web.Script.Serialization;

namespace CSCM.DataTableAjax
{
    /// <summary>
    /// 分页控件统一处理函数
    /// </summary>
    public class MVCDataTableManager
    {
        /// <summary>
        /// 分页控件加载数据的事件
        /// </summary>
        public event _GetDataTableDB GetDataTableDB;
        /// <summary>
        /// 删除的事件
        /// </summary>
        public event _DeleteItem DeleteItem;
        /// <summary>
        /// 如果是内存分页，将会触发
        /// </summary>
        public event _GetDataTableMes GetDataTableMes;
        /// <summary>
        /// 显示的样式(注意：必须在引用的js路径上带有显示的DIV的id时才有效！例如xxx.ashx?divid=xxx)
        /// </summary>
        public DataTableStyle ShowTableStyle { get; set; }


        private System.Web.HttpContextBase _Context { get; set; }
        private PageDataTableType _PageType { get; set; }
        /// <summary>
        /// 是否缓存
        /// </summary>
        private PageDataTableCache _IsCache { get; set; }
        /// <summary>
        /// 缓存名称
        /// </summary>
        private string _CacheKeyName { get; set; }

        /// <summary>
        /// 创建对象
        /// </summary>
        /// <param name="Context">请求的HttpContext</param>
        /// <param name="PageType">分页类型内存还是数据库分页</param>
        public MVCDataTableManager(System.Web.HttpContextBase Context, PageDataTableType PageType)
        {
            _Context = Context;
            _PageType = PageType;
            _IsCache = PageDataTableCache.No;
        }
        /// <summary>
        /// 创建对象 指定可以缓存(只能用来创建内存分页)
        /// </summary>
        /// <param name="Context">请求的HttpContext</param>
        /// <param name="CacheKeyName">缓存的key必须是常量并且系统唯一</param>
        public MVCDataTableManager(System.Web.HttpContextBase Context, string CacheKeyName)
        {
            _Context = Context;
            _PageType = PageDataTableType.MesPage;
            _CacheKeyName = CacheKeyName;
            _IsCache = PageDataTableCache.Yes;
        }
        /// <summary>
        /// 初始化的函数，该函数必须在事件绑定之后。否则无法触发绑定的事件！当分页方式选择为内存分页(PageType==MesPage)时，使用的Handler页面的Session必须是可读写状态（继承System.Web.SessionState.IRequiresSessionState）
        /// </summary>
        public string Init()
        {
            string returnMag = string.Empty;
            System.Web.HttpContextBase Context = _Context;
            PageDataTableType PageType = _PageType;
            if (Context.Request.RequestType.Trim().ToLower() == "get")
            {
                //如果是get请求
                returnMag= GetJsFile(Context);
                
            }

            StreamReader Str = new StreamReader(Context.Request.InputStream);
            string txtJson = Context.Server.UrlDecode(Str.ReadToEnd());
            PostForm pf = null;
            try
            {
                pf = JavaScriptDeserialize<PostForm>(txtJson);
            }
            catch (Exception)
            { }
            if (pf != null)
            {
                if (pf.PostTypeFun == PostType.GetData || pf.PostTypeFun == PostType.Refresh)
                {
                    if (PageType == PageDataTableType.DBPage)
                    {
                        DataTable Dt = null;
                        Dictionary<string, UserEval> Dic = new Dictionary<string, UserEval>();
                        string WhereKey = null;
                        int DataCount = 0;
                        int PageSize = 12;
                        string StateMagTxt = "";
                        GetDataState GetDataState = GetDataState.Yes;
                        if (GetDataTableDB != null)
                        {
                            GetDataTableDB(ref pf, out Dt, out Dic, out WhereKey, out DataCount, ref PageSize, ref GetDataState, ref StateMagTxt);
                            //返回数据
                            if (Dt != null && Dic != null && GetDataState == GetDataState.Yes)
                            {
                                //处理dic和数据
                                Dictionary<string, string> DicCop = new Dictionary<string, string>();
                                //显示还是影藏的列
                                string[] ShowHid = new string[0];
                                Dt = DataTableToHidDataTable(Dt, Dic, out DicCop, out ShowHid);
                                string json = DataTableToJson(Dt);
                                //列头
                                string JsonKey = JavaScriptSerializable(DicCop);
                                //显示状态
                                string ShowState = JavaScriptSerializable(ShowHid);
                                string JsonModel = "{\"State\": \"222\",\"Mag\": \"" + StateMagTxt + "\",\"dataCount\":\"" + DataCount + "\",\"PageSize\":\"" + PageSize + "\",\"PageIndex\":\"" + pf.PageIndex + "\",\"WhereKey\":\"" + WhereKey + "\",\"title\":" + JsonKey + ",\"ShowState\":" + ShowState + ",\"data\":" + json + "}";
                                returnMag=JsonModel;
                            }
                            else
                            {
                                //表示没有取到数据表
                                returnMag="{\"State\": \"404\",\"Mag\": \"" + StateMagTxt + "\"}";
                            }
                        }
                    }
                    else
                    {
                        //内存分页
                        DataTable Dt = null;
                        Dictionary<string, UserEval> Dic = new Dictionary<string, UserEval>();
                        string WhereKey = null;
                        int PageSize = 12;
                        string StateMagTxt = "";
                        GetDataState GetDataState = GetDataState.Yes;
                        if (GetDataTableMes != null)
                        {
                            if ((Dt == null || Dic == null) || (pf.WhereTxt != null && pf.WhereTxt != ""))
                            {
                                if (_IsCache == PageDataTableCache.Yes && pf.PostTypeFun != PostType.Refresh && pf.PageIndex != 0)
                                {
                                    //如果允许缓存并且不是刷新数据并且不是第一页则不响应函数
                                    //获取缓存数据
                                    if (!string.IsNullOrEmpty(_CacheKeyName))
                                    {
                                        Dt = Context.Cache[_CacheKeyName] as DataTable;
                                        Dic = Context.Cache[_CacheKeyName + "_Dic"] as Dictionary<string, UserEval>;
                                        WhereKey = Context.Cache[_CacheKeyName + "_WhereKey"] as string;
                                        StateMagTxt = Context.Cache[_CacheKeyName + "_StateMagTxt"] as string;
                                        if (Context.Cache[_CacheKeyName + "_PageSize"] != null)
                                        {
                                            int.TryParse(Context.Cache[_CacheKeyName + "_PageSize"].ToString(), out PageSize);
                                        }
                                        else
                                        {
                                            PageSize = 0;
                                        }
                                        if (Context.Cache[_CacheKeyName + "_GetDataState"] != null)
                                        {
                                            try
                                            {
                                                GetDataState = (GetDataState)Enum.Parse(typeof(GetDataState), Context.Cache[_CacheKeyName + "_GetDataState"].ToString());
                                                //可以
                                            }
                                            catch (Exception)
                                            {

                                                GetDataTableMes(ref pf, out Dt, out Dic, out WhereKey, ref PageSize, ref GetDataState, ref StateMagTxt);
                                            }
                                        }
                                        else
                                        {
                                            //不行
                                            GetDataTableMes(ref pf, out Dt, out Dic, out WhereKey, ref PageSize, ref GetDataState, ref StateMagTxt);
                                        }
                                    }
                                }
                                else
                                {
                                    GetDataTableMes(ref pf, out Dt, out Dic, out WhereKey, ref PageSize, ref GetDataState, ref StateMagTxt);
                                    //保存缓存数据
                                    if (!string.IsNullOrEmpty(_CacheKeyName))
                                    {
                                        Context.Cache[_CacheKeyName] = Dt;
                                        Context.Cache[_CacheKeyName + "_Dic"] = Dic;
                                        Context.Cache[_CacheKeyName + "_WhereKey"] = WhereKey;
                                        Context.Cache[_CacheKeyName + "_PageSize"] = PageSize;
                                        Context.Cache[_CacheKeyName + "_GetDataState"] = GetDataState;
                                        Context.Cache[_CacheKeyName + "_StateMagTxt"] = StateMagTxt;
                                    }
                                }
                            }
                            //返回数据
                            if (Dt != null && Dic != null && GetDataState == GetDataState.Yes)
                            {
                                DataTable ScoDataTable = new DataTable();
                                ScoDataTable = Dt.Copy();
                                ScoDataTable.Rows.Clear();
                                for (int i = (pf.PageIndex * PageSize); i < ((pf.PageIndex * PageSize) + PageSize); i++)
                                {
                                    if (i < Dt.Rows.Count)
                                    {
                                        ScoDataTable.ImportRow(Dt.Rows[i]);
                                    }
                                }
                                //处理dic和数据
                                Dictionary<string, string> DicCop = new Dictionary<string, string>();
                                //显示还是影藏的列
                                string[] ShowHid = new string[0];
                                ScoDataTable = DataTableToHidDataTable(ScoDataTable, Dic, out DicCop, out ShowHid);
                                string json = DataTableToJson(ScoDataTable);
                                //列头
                                string JsonKey = JavaScriptSerializable(DicCop);
                                //显示状态
                                string ShowState = JavaScriptSerializable(ShowHid);
                                string JsonModel = "{\"State\": \"222\",\"Mag\": \"" + StateMagTxt + "\",\"dataCount\":\"" + Dt.Rows.Count + "\",\"PageSize\":\"" + PageSize + "\",\"PageIndex\":\"" + pf.PageIndex + "\",\"WhereKey\":\"" + WhereKey + "\",\"title\":" + JsonKey + ",\"ShowState\":" + ShowState + ",\"data\":" + json + "}";
                                returnMag=JsonModel;
                            }
                            else
                            {
                                //表示没有取到数据表
                                returnMag="{\"State\": \"404\",\"Mag\": \"" + StateMagTxt + "\"}";
                            }
                        }
                    }
                }
                else if (pf.PostTypeFun == PostType.Delete)
                {
                    if (DeleteItem != null)
                    {
                        string StateMagTxt = "";
                        DeleteItemState DelState = DeleteItemState.No;
                        DeleteItem(ref pf, out DelState, ref StateMagTxt);
                        if (DelState == DeleteItemState.Yes)
                        {
                            //删除成功
                            returnMag="{\"State\": \"211\",\"Mag\": \"" + StateMagTxt + "\"}";
                        }
                        else
                        {
                            //删除失败
                            returnMag="{\"State\": \"112\",\"Mag\": \"" + StateMagTxt + "\"}";
                        }
                    }
                }
            }
            return returnMag;
        }

        private string DataTableToJson(DataTable dt)
        {
            JavaScriptSerializer javaScriptSerializer = new JavaScriptSerializer();
            javaScriptSerializer.MaxJsonLength = Int32.MaxValue; //取得最大数值
            ArrayList arrayList = new ArrayList();
            foreach (DataRow dataRow in dt.Rows)
            {
                Dictionary<string, object> dictionary = new Dictionary<string, object>();  //实例化一个参数集合
                foreach (DataColumn dataColumn in dt.Columns)
                {
                    dictionary.Add(dataColumn.ColumnName, dataRow[dataColumn.ColumnName].ToString());
                }
                arrayList.Add(dictionary); //ArrayList集合中添加键值
            }
            return javaScriptSerializer.Serialize(arrayList);  //返回一个json字符串
        }

        private static string JavaScriptSerializable(object Value)
        {
            JavaScriptSerializer js = new JavaScriptSerializer();
            return js.Serialize(Value);
        }
        private static T JavaScriptDeserialize<T>(string Json)
        {
            JavaScriptSerializer js = new JavaScriptSerializer();
            return js.Deserialize<T>(Json);
        }

        private DataTable DataTableToHidDataTable(DataTable Dt, Dictionary<string, UserEval> Dic, out Dictionary<string, string> DicTxt, out string[] DicShowHid)
        {
            Dictionary<string, string> SDicToKey = new Dictionary<string, string>();
            //存储列的显示状态
            DicShowHid = new string[Dic.Keys.Count];
            if (Dic.Count != 0)
            {
                int keyIndex = 0;
                foreach (string key in Dic.Keys)
                {
                    //存储列是显示还是影藏
                    if (Dic[key].KeyColumnShow == null || Dic[key].KeyColumnShow == ColumnShowType.Show)
                    {
                        DicShowHid[keyIndex] = "Show";
                    }
                    else
                    {
                        DicShowHid[keyIndex] = "Hide";
                    }
                    keyIndex++;

                    if (Dic[key].ValueToUserInfoHandle != null)
                    {
                        //自定义
                        //添加一列
                        string NameKey = Dic[key].KeyName + Guid.NewGuid().ToString("N");
                        //string yuanguidKey = NameKey.Substring(0, NameKey.Length - 32);
                        Dt.Columns.Add(NameKey);
                        //复制数据
                        foreach (DataRow Dr in Dt.Rows)
                        {
                            Dr[NameKey] = Dr[Dic[key].KeyName];
                        }
                        SDicToKey.Add(key, NameKey);
                        Dictionary<string, ValueToUserInfo> DicToUserValue = new Dictionary<string, ValueToUserInfo>();
                        DicToUserValue.Add(NameKey, Dic[key].ValueToUserInfoHandle);
                        Dt = DataTableToDataTable(Dt, DicToUserValue);

                    }
                    else if (Dic[key].KeyValueToUser != null)
                    {
                        //自定义
                        //添加一列
                        string NameKey = Dic[key].KeyName + Guid.NewGuid().ToString("N");
                        //string yuanguidKey = NameKey.Substring(0, NameKey.Length - 32);
                        Dt.Columns.Add(NameKey);
                        //复制数据
                        foreach (DataRow Dr in Dt.Rows)
                        {
                            Dr[NameKey] = Dr[Dic[key].KeyName];
                        }
                        SDicToKey.Add(key, NameKey);
                        Dictionary<string, string> DicToUserValue = new Dictionary<string, string>();
                        DicToUserValue.Add(NameKey, Dic[key].KeyValueToUser);
                        Dt = DataTableToDataTable(Dt, DicToUserValue);
                    }
                    else
                    {
                        SDicToKey.Add(key, Dic[key].KeyName);
                        Dt = Dt;
                    }
                }

            }
            DicTxt = SDicToKey;


            return Dt;
        }

        private static DataTable DataTableToDataTable(DataTable Dt, Dictionary<string, string> Dic)
        {
            DataTable DtK = new DataTable();
            DtK = Dt.Clone();
            //修改表结构
            if (Dic != null && Dic.Count > 0)
            {
                foreach (DataColumn Col in DtK.Columns)
                {
                    foreach (string KeyStr in Dic.Keys)
                    {
                        if (Col.ColumnName == KeyStr)
                        {
                            //修改列类型
                            Col.DataType = typeof(String);
                        }
                    }
                }
            }
            foreach (DataRow Dr in Dt.Rows)
            {
                DataRow DrK = DtK.NewRow();
                foreach (DataColumn DtCol in Dt.Columns)
                {
                    if (Dic.Keys.Contains(DtCol.ColumnName))
                    {
                        DrK[DtCol.ColumnName] = Dic[DtCol.ColumnName].Replace("[value]", Dr[DtCol.ColumnName].ToString()); ;
                    }
                    else
                    {
                        DrK[DtCol.ColumnName] = Dr[DtCol.ColumnName];
                    }
                }
                DtK.Rows.Add(DrK);
            }
            //[value]
            return DtK;
        }

        private static DataTable DataTableToDataTable(DataTable Dt, Dictionary<string, ValueToUserInfo> Dic)
        {
            DataTable DtK = new DataTable();
            DtK = Dt.Clone();
            //修改表结构
            if (Dic != null && Dic.Count > 0)
            {
                foreach (DataColumn Col in DtK.Columns)
                {
                    foreach (string KeyStr in Dic.Keys)
                    {
                        if (Col.ColumnName == KeyStr)
                        {
                            //修改列类型
                            Col.DataType = typeof(String);
                        }
                    }
                }
            }
            foreach (DataRow Dr in Dt.Rows)
            {
                DataRow DrK = DtK.NewRow();
                foreach (DataColumn DtCol in Dt.Columns)
                {
                    if (Dic.Keys.Contains(DtCol.ColumnName))
                    {
                        if (Dic[DtCol.ColumnName] != null)
                        {
                            string Value = Dr[DtCol.ColumnName].ToString();
                            ValueToUserInfo VUI = Dic[DtCol.ColumnName];
                            VUI(ref Value, Dr);
                            string ValOut = Value;
                            DrK[DtCol.ColumnName] = ValOut;
                        }
                        //DrK[DtCol.ColumnName] = Dic[DtCol.ColumnName].Replace("[value]", Dr[DtCol.ColumnName].ToString()); ;
                    }
                    else
                    {
                        DrK[DtCol.ColumnName] = Dr[DtCol.ColumnName];
                    }
                }
                DtK.Rows.Add(DrK);
            }
            //[value]
            return DtK;
        }
        /// <summary>
        /// 读取js文件
        /// </summary>
        /// <param name="Context"></param>
        public string GetJsFile(System.Web.HttpContextBase Context)
        {
            string returnMag = string.Empty;
            if (Context.Request.QueryString["help"] != null && !string.IsNullOrEmpty(Context.Request.QueryString["help"]))
            {
                if (Context.Request.QueryString["help"].Trim().ToLower() == "true")
                {
                    returnMag = helpStr;
                }
            }
            string DivId = Context.Request.QueryString["divid"];
            if (string.IsNullOrEmpty(DivId) && Context.Request.QueryString.Count > 0)
            {
                DivId = Context.Request.QueryString[0];
            }
            //获取当前请求的地址
            string ReUrl = Context.Request.Url.AbsoluteUri;
            byte[] StrByte = Convert.FromBase64String(JavaScriptBase64UTF8);
            string javascriptStr = System.Text.Encoding.UTF8.GetString(StrByte);
            //更改的时候使用
            //FileStream fs = File.Open(HttpContext.Current.Server.MapPath("1.txt"), FileMode.Open);
            //StreamReader sr = new StreamReader(fs, Encoding.UTF8);
            //string a = sr.ReadToEnd();
            //sr.Close();
            //fs.Close();//"".
            //byte[] aaaa = Encoding.UTF8.GetBytes(a);
            //string bbb = Convert.ToBase64String(aaaa);
            if (!string.IsNullOrEmpty(DivId))
            {
                returnMag="document.write('" + GetDataTableStyle(DivId) + "');" + javascriptStr.Replace("【DataTableDivId】", DivId).Replace("【PosrUrlTxt】", ReUrl) + "window.onload = function () {new DataTableObj().SelectDataTable({});}";
            }
            else
            {
                //把javascript打印到页面
                returnMag="document.write('" + GetDataTableStyle(DivId) + "');" + javascriptStr.Replace("【DataTableDivId】", DivId).Replace("【PosrUrlTxt】", ReUrl);
            }
            return returnMag;
        }
        private string GetDataTableStyle(string DivId)
        {
            string StyleTxt = "";
            switch (ShowTableStyle)
            {
                case DataTableStyle.Null:
                    StyleTxt = "";
                    break;
                case DataTableStyle.Default:
                    StyleTxt = DataTableStyleTXT.Default;
                    break;
            }
            StyleTxt = StyleTxt.Replace("{divid_Lan}", DivId);
            return StyleTxt;
        }
        //private string JavaScriptBase64UTF8 = "";
        private string JavaScriptBase64UTF8 = "";
        //备份4.0.1版本的js代码
        //private string JavaScriptBase64UTF8 = "";
        private string helpStr = "兰少奇：2014-3-28<br>参数说明<br>首先添加引用，引用的地址为后台的处理页面例如：&lt;script  src=&quot;Handler.ashx?divid=list&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<br>使用前创建var pagetool=new DataTableObj()对象<br>调用查询函数pagetool.SelectDataTable({属性参数的json字符},<br>"
            + "\"删除后所回调的函数（state）返回删除的状态true成功false失败\"  有此函数则显示删除按钮没有则影藏<br>"
            + ",\"修改按钮的回调函数（id,arry）返回绑定的id和数据\") 有此函数则显示修改按钮没有则影藏<br>"
            + ",\"全选多选触发事件（keyList）如果全选则返回选中的key列表\" 有此函数则显示多选按钮没有则影藏<br>"
            + ",\"每一项数据的多选按钮触发的事件(checkobj)返回点中的check标签\"<br>,\"请求服务器完毕后回调的函数（请求类型【1表示读取数据2表示删除请求操作】，状态【true成功false失败】，服务器反回的消息）\"<br>"
            + ")<br>"
            + "全局函数请使用pagetool.方法名称来调用<br>"
            + "//获取全选选中的值<br>"
            + "GetCheckAllValueList();返回选中数据的key列表<br>"
            + "//当前位置刷新（当前页数刷新）<br>"
            + "UpStateRefresh();刷新当前页<br>"
            + "属性参数json结构<br>"
            + "{\"属性\":\"值\"}<br>"
            + "以下属性有效（参数配置）：<br>"
            + "ShowDataTableDivId;//必须属性显示数据的div的ID<br>"
            + "GetDataTableUrl;//数据来源的url<br>"
            + "GetDataTableByWhereTxt//查询的条件该值可以自定义将原本的传到后台;<br>"
            + "PageShowButCount;//显示翻页按钮的个数<br>"
            + "DeleteButHtml ;//删除按钮显示的文字<br>"
            + "UpdateButHtml;//修改按钮显示的文字<br>"
            + "CheckIsTrueTxt;//当全选按钮选中时显示的文字<br>"
            + "CheckIsFalseTxt;//当全选按钮没有选中时显示的文字<br>"
            + "CheckItemTxt ;//多选按钮每一项所显示的文字<br>"
            + "DeleteOrUpdateTitle;//删除或修改的列头显示的文字，默认为“操作”<br>"
            + "LoginDivClassName;//每次请求数据时显示Lodin加载的div的样式(设置Class的属性)<br>"
            + "LoginDivHtml;//显示正在加载/处理时候的文字"
            + "DeleteShowTxt;//用户点击删除时弹出的提示文字<br>"
            + "PageIndexToolState;//是否显示复杂的分页工具【包含首页尾页和跳转到某一页】【true或false】"
            + "以下属性有效（方法配置）：<br>"
            + "UpdateButClick;//修改按钮触发（有该方法则显示修改按钮，该属性和形参的方法都设置的话以形参为主）<br>"
            + "DeleteItemState;//删除回调（有该方法则显示删除按钮，该属性和形参的方法都设置的话以形参为主）<br>"
            + "CheckAllChange;//全选时触发（有该方法则显示多选按钮，该属性和形参的方法都设置的话以形参为主）<br>"
            + "CheckItemChange;//点击多选框时触发（该属性和形参的方法都设置的话以形参为主）<br>"
            + "Callback;//请求回调（该属性和形参的方法都设置的话以形参为主）<br>";

    }
}
